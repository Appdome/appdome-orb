description: >
  Perform Appdome fusing with all types of Android and iOS signings.

working_directory: /home/circleci/project
parameters:
  runner:
    description: >
      Choose which fusing operation you want to perfom, on which paltform (iOS or Android)
      and type of sign.
    type: enum
    enum:
      - "ANDROID_AUTO_SIGNING"
      - "ANDROID_PRIVATE_SIGNING"
      - "ANDROID_AUTO_DEV_SIGNING"
      - "IOS_AUTO_SIGNING"
      - "IOS_PRIVATE_SIGNING"
      - "IOS_AUTO_DEV_SIGNING"
  appdome-api-token:
    type: env_var_name
    default: APPDOME_API_TOKEN
    description: "Appdome-provided API token"
  appFile:
    type: string
    description: "Absolute path to your app"
  team-id:
    type: string
    default: ""
    description: "your Team's ID."
  fusion-set-id-ios:
    type: env_var_name
    default: FUSION_SET_ID_IOS
    description: "Fusion Set with the features you want to add to your iOS application."
  fusion-set-id-android:
    type: env_var_name
    default: FUSION_SET_ID_ANDROID
    description: "Fusion Set with the features you want to add to your android application."
  output:
    type: string
    default: "Appdome_Secured_App"
    description: "The name of the output fused app."
  second-output:
    type: boolean
    default: false
    description: "Second_output_app_file."
  sign-overrides:
    type: string
    default: ""
    description: "Optional parameter - json file overrides to pass arguments to overrides sign parameters."
  build-with-logs:
    type: boolean
    default: false
    description: "Diagnostic logs are used for troubleshooting application errors."
  build-to-test:
    type: enum
    enum:
      - "BITBAR"
      - "BROWSERSTACK"
      - "LAMBDATEST"
      - "SAUCELABS"
      - "NONE"
    default: "NONE"
    description: "Enter vendor name on which Build to Test will happen."
  # ANDROID PRIVATE SIGN
  signing-fingerprint:
    type: env_var_name
    default: SIGN_FINGERPRINT
    description: "Your unique signing certificate fingerprint is required to tamper-proof Built applications."
  google-play-signing:
    type: boolean
    default: false
    description: "This application will be distributed via the Google Play App Signing program."
  # ANDROID AUTO SIGN
  keystore-file:
    type: env_var_name
    default: KEYSTORE_FILE
    description: "This should be the same keystore file used to sign your Android app when distributing it via Google Play."
  keystore-password:
    type: env_var_name
    default: KEYSTORE_PASSWORD
    description: "The password used to unlock your keystore."
  keystore-alias:
    type: env_var_name
    default: KEYSTORE_ALIAS
    description: "The name you assigned to your keystore"
  keystore-key-password:
    type: env_var_name
    default: KEYSTORE_KEY_PASSWORD
    description: "This is the specific password defined for your signing key."
  #IOS-AUTO-SIGN
  p12-file:
    type: env_var_name
    default: KEYSTORE_P12_FILE
    description: "A P12 certificate file is a certificate and private key concatenated into a single file, protected by a password."
  p12-password:
    type: env_var_name
    default: P12_PASSWORD
    description: "The password used to unlock your keystore."
  provisioning-profiles:
    type: env_var_name
    default: MOBILE_PROVISION_PROFILE_FILE
    description: "A Provisioning Profile allows you to install apps onto your iOS device and includes the signing certificates,
     a list of supported device identifiers, entitlements, and an App ID."
  entitlements:
    type: env_var_name
    default: ENTITLEMENTS_FILE
    description: "A plist file with the entitlements used for the application. Can be obtained from the Derived Data folder in Xcode"
docker:
  - image: cimg/python:3.9.16
steps:
  - checkout
  - run:
      name: Clone Appdome API repository
      command: |
          git clone https://github.com/Appdome/appdome-api-python.git
  - run:
      name: Install requirements
      command: <<include(scripts/install_requirements.sh)>>
  - run:
      environment:
        APPFILE: <<parameters.appFile>>
        SIGNOVERRIDES: <<parameters.sign-overrides>>
      name: Downloading files
      command: <<include(scripts/download_files.sh)>>
  - when:
      condition:
        equal: [ "ANDROID_PRIVATE_SIGNING", <<parameters.runner>> ]
      steps:
        - appdome_android_private_signing:
            appdome-api-token: << parameters.appdome-api-token >>
            appFile: <<parameters.appFile>>
            fusion-set-id-android: <<parameters.fusion-set-id-android>>
            output: <<parameters.output>>
            signing-fingerprint: <<parameters.signing-fingerprint>>
            google-play-signing: <<parameters.google-play-signing>>
            sign-overrides: <<parameters.sign-overrides>>
            team-id: <<parameters.team-id>>
            build-with-logs: <<parameters.build-with-logs>>
            second-output: <<parameters.second-output>>
            build-to-test: <<parameters.build-to-test>>
  - when:
      condition:
        equal: [ "ANDROID_AUTO_SIGNING", <<parameters.runner>> ]
      steps:
        - appdome_android_auto_signing:
            appdome-api-token: << parameters.appdome-api-token >>
            appFile: <<parameters.appFile>>
            fusion-set-id-android: <<parameters.fusion-set-id-android>>
            output: <<parameters.output>>
            team-id: <<parameters.team-id>>
            keystore-file: <<parameters.keystore-file>>
            keystore-password: << parameters.keystore-password >>
            keystore-alias: <<parameters.keystore-alias>>
            keystore-key-password: << parameters.keystore-key-password >>
            google-play-signing: <<parameters.google-play-signing>>
            sign-overrides: <<parameters.sign-overrides>>
            build-with-logs: <<parameters.build-with-logs>>
            second-output: <<parameters.second-output>>
            build-to-test: <<parameters.build-to-test>>
  - when:
      condition:
        equal: [ "ANDROID_AUTO_DEV_SIGNING", <<parameters.runner>> ]
      steps:
        - appdome_android_autodev_private_signing:
            appdome-api-token: << parameters.appdome-api-token >>
            appFile: <<parameters.appFile>>
            fusion-set-id-android: <<parameters.fusion-set-id-android>>
            output: <<parameters.output>>
            signing-fingerprint: <<parameters.signing-fingerprint>>
            google-play-signing: <<parameters.google-play-signing>>
            sign-overrides: <<parameters.sign-overrides>>
            team-id: <<parameters.team-id>>
            build-with-logs: <<parameters.build-with-logs>>
            build-to-test: <<parameters.build-to-test>>
  - when:
      condition:
        equal: [ "IOS_AUTO_SIGNING", <<parameters.runner>> ]
      steps:
        - appdome_ios_auto_signing:
            appdome-api-token: << parameters.appdome-api-token >>
            appFile: <<parameters.appFile>>
            fusion-set-id-ios: <<parameters.fusion-set-id-ios>>
            output: <<parameters.output>>
            p12-file: <<parameters.p12-file>>
            P12-password: <<parameters.p12-password>>
            provisioning-profiles: <<parameters.provisioning-profiles>>
            entitlements: <<parameters.entitlements>>
            sign-overrides: <<parameters.sign-overrides>>
            team-id: <<parameters.team-id>>
            build-with-logs: <<parameters.build-with-logs>>
            build-to-test: <<parameters.build-to-test>>
  - when:
      condition:
        equal: [ "IOS_PRIVATE_SIGNING", <<parameters.runner>> ]
      steps:
        - appdome_ios_private_signing:
            appdome-api-token: << parameters.appdome-api-token >>
            appFile: <<parameters.appFile>>
            fusion-set-id-ios: <<parameters.fusion-set-id-ios>>
            output: <<parameters.output>>
            team-id: <<parameters.team-id>>
            provisioning-profiles: <<parameters.provisioning-profiles>>
            sign-overrides: <<parameters.sign-overrides>>
            build-with-logs: <<parameters.build-with-logs>>
            build-to-test: <<parameters.build-to-test>>
  - when:
      condition:
        equal: [ "IOS_AUTO_DEV_SIGNING", <<parameters.runner>> ]
      steps:
        - appdome_ios_autodev_private_signing:
            appdome-api-token: << parameters.appdome-api-token >>
            appFile: <<parameters.appFile>>
            fusion-set-id-ios: <<parameters.fusion-set-id-ios>>
            entitlements: <<parameters.entitlements>>
            output: <<parameters.output>>
            provisioning-profiles: <<parameters.provisioning-profiles>>
            sign-overrides: <<parameters.sign-overrides>>
            team-id: <<parameters.team-id>>
            build-with-logs: <<parameters.build-with-logs>>
            build-to-test: <<parameters.build-to-test>>
  - persist_to_workspace:
      root: .
      paths:
        - appdome_outputs
  - store_artifacts:
      path: ./appdome_outputs/
      destination: appdome_fusion
